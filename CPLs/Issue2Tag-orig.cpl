/*
 * PROGRAM NAME: IssueToTag.CPL
 * ------------
 *      Concordance® Programming Language Issue To Tag Program Copyright © 2008 LexisNexis,
 *      a division of Reed Elsevier Inc.All rights reserved.
 *      LexisNexis and the Knowledge Burst logo are registered 
 *      trademarks of Reed Elsevier Properties Inc., used under license.  Concordance is a 
 *      registered trademark of LexisNexis, a division of Reed Elsevier Inc.
 *      LexisNexis, 13427 NE 16th ST Suite 200 
 *      Bellevue, WA 98005
 *
 *      Unauthorized distribution, adaptation or use may be 
 *      subject to civil and criminal penalties.
 *     
 *      You may incorporate this program into your own programs 
 *      ONLY if you incorporate the following copyright notice:
 *      Copyright © 20__ YOUR NAME. ALL RIGHTS RESERVED. 
 *      Portions copyright © 1994-2008 LexisNexis, a division of Reed Elsevier, Inc.  
 *      All rights reserved.
 *
 *
 *      Synopsis
 *      ---------
 *      This program converts all issues from the current query into tags.
 *
 * USAGE:
 * ------
 *      This CPL should need no modification. It should prompt the user 
 *      for all the information it needs to run, using message boxes. 
 *      After all the information is collected, this program will perform
 *      the conversion on the curent search list.
 */
text gszIssue2Tag = "Issue2Tag.cpl";

/**************************************************************************
 * Function: Main                                    
 * Purpose : Entry point for all programs            
 **************************************************************************/
main()
{
   int      db,
            nError,
            bCancelProcessing,
            btIssues,
            nCurrentAnnotation,
            nTotalAnnotations,
            btNotesTag,
            nData,
            bDeleteEmptyNotes;
   text     pszOldDatabase,
            pszIssuesBtree,
            pszIssue;            
   
   /* Tell the user what this CPL will do */
   messageBox("This CPL will convert all issues from the current query into tags.  Any existing issues will be deleted." + newline() +
              "Please make a backup copy of your database first.",
              gszIssue2Tag, MB_OK);
   
   /* Ask the user if they want to delete empty notes */
   if (messageBox("Do you want to delete any empty notes?", gszIssue2Tag, MB_ICONQUESTION | MB_YESNO) == IDYES)
      bDeleteEmptyNotes = TRUE;
      
   /* Initialize variables.  Unnecessary, but good to do. */
   nError = 0;
   bCancelProcessing = FALSE;
   btIssues = EOF;
   
   /* Cycle through the current query */
   cycle(db) {
   
      /* Put up a status message */
      puts(0, 0, "Processing record " + str(docno(db)) + " of " + str(count(db)));
      
      /* Check to see if the database changed */
      if (db.database <> pszOldDatabase) {
      
         /* Close the old temp b-tree */
         if (btIssues <> EOF) {
            btclose(btIssues);
            erase(pszIssuesBtree);
            btIssues = EOF;
         }
         
         /* Create a new temporary b-tree containing all */
         /* issues for the current notes database.       */
         pszIssuesBtree = db.database + "-temp issues.lst";
         if ((btIssues = btcreate(pszIssuesBtree, FALSE)) <> EOF) {

            /* Copy the tags from the notes file */
			if (GetDatabaseVersion(db) < 9)
			{
				if (CopyIssues(db, btIssues))
					bCancelProcessing = TRUE;
			}
			else
			{
				if (CopyIssuesV9(db, btIssues))
					bCancelProcessing = TRUE;
			}
         
         } else {
         
            /* Tell the user there was an error creating the file and exit */
            messageBox("There was an error while trying to create the following temporary file." + newline() + newline() + 
                        pszIssuesBtree + newline() + newline() + 
                        "Please check to make sure this file does not already exist and then re-run this program.",
                        gszIssue2Tag, MB_ICONEXCLAMATION | MB_OK);
            bCancelProcessing = TRUE;
         }
         
         /* Save the old database */
         pszOldDatabase = db.database;
      }
      
      /* Get the annotation count */
      nCurrentAnnotation = nTotalAnnotations = annotationCount(db);

      /* Cycle backwards through the annotations.  This is so we can delete an annotation if necessary. */
      for (nError = annotationGoto(db, nCurrentAnnotation); (nError == 0) and (bCancelProcessing == FALSE) and (nCurrentAnnotation > 0); nError = annotationGoto(db, nCurrentAnnotation)) {
      
         /* Cycle through the list of issues */
         for (nError = btfirst(btIssues, pszIssue, nData); nError == 0; nError = btnext(btIssues, pszIssue, nData)) {

            /* See if the current annotation is tagged with this issue */
            if (annotationIsTagged(db, pszIssue)) {
            
               /* Untag the issue */
               annotationTag(db, FALSE, pszIssue);
               
               /* Tag the issue to the document */
               tag(db, TRUE, pszIssue);               
            }
         }
      
         /* Delete empty notes or scan backwards to the previous annotation */
         if (bDeleteEmptyNotes) {
         
            /* Check to see if there is text or an attachment */
            if ((annotationRetrieve(db, "NOTETEXT") == "") and (annotationRetrieve(db, "NOTEATTACHED") == "")) {            
            
               /* Delete the annotation */
               annotationDelete(db);
               
               /* Reset the count */
               if (nCurrentAnnotation == nTotalAnnotations)
                  nCurrentAnnotation = nTotalAnnotations = annotationCount(db);
               else
                  nCurrentAnnotation = nCurrentAnnotation - 1;
               
            } else
               nCurrentAnnotation = nCurrentAnnotation - 1;
               
         } else                      
            nCurrentAnnotation = nCurrentAnnotation - 1;
      } 
            
      /* If we exited prematurely, or the user hit Cancel, exit the program */
      if (bCancelProcessing == TRUE)
         break;
      if (keypress()) {
         if (getkey() == ESC)
            break;
      }           
   }   
   
   /* Close and delete any temporary files */
   if (btIssues <> EOF) {
      btclose(btIssues);
      erase(pszIssuesBtree);
      btIssues = EOF;
   }   
}


/**************************************************************************
 * Function: CopyIssues
 * Purpose : Copies issues from the tag file into a destination list file.
 **************************************************************************/
CopyIssues(int db, btDestination)
{
   int      btIssues,
            nError,
            nData;
   text     pszIssue;
   
   /* Try and open the notes tag file */
   if ((btIssues = btopen(db.database + "-notes.tag")) <> EOF) {

      /* Cycle through the tag file */
      for (nError = btfirst(btIssues, pszIssue, nData); nError == 0; nError = btgte(btIssues, pszIssue, pszIssue, nData)) {
      
         /* Insert the tag into the file */
         btinsert(btDestination, pszIssue, nData);
         
         /* Concatenate a space to skip over all tags to the next tag */
         pszIssue = pszIssue + " ";
      }
      
      /* Close the notes tag file */
      btclose(btIssues);
      nError = FALSE;
         
   } else {
   
      /* Tell the user we were unable to open the notes tag file */
      messageBox("Unable to open the notes tag (issue) file.  Most likely there are no issues attached to this database.", gszIssue2Tag, MB_ICONEXCLAMATION | MB_OK);
      nError = TRUE;
   }
   
   return(nError);
}


/**************************************************************************
 * Function: CopyIssues
 * Purpose : Copies issues from the tag file into a destination list file.
 **************************************************************************/
CopyIssuesV9(int db, btDestination)
{
   int      btIssues,
            nError,
            nData,
			i;
   text     pszIssue;
   
   /* Try and open the notes tag file */
   if ((btIssues = btopen(db.database + "-notes.trk")) <> EOF) {

      /* Set up our string to search */
      pszIssue = "$";

      /* Cycle through the track file looking for all entries that start with '$' */
      for (i = btgte(btIssues, pszIssue, pszIssue, nData); i == 0; i = btgt(btIssues, pszIssue, pszIssue, nData)) 
      {    
         /* Add the key to the list */
         i = btinsert(btDestination, substr(pszIssue, 2), 0);
      
         /* Add a space to jump to the next tag */
         pszIssue = pszIssue + " ";
      }            

      /* Close the notes tag file */
      btclose(btIssues);
      nError = FALSE;
         
   } else {
   
      /* Tell the user we were unable to open the notes tag file */
      messageBox("Unable to open the notes trk file.  Most likely there are no issues attached to this database.", gszIssue2Tag, MB_ICONEXCLAMATION | MB_OK);
      nError = TRUE;
   }
   
   return(nError);
}


/****************************************************************
* Name:         GetDatabaseVersion                              *
* Synopsis:     Returns int with major version of db.           *
****************************************************************/
GetDatabaseVersion(int db)
{
   int fh;
   char szBuffer[3];
   float fVer;
   
   /* Open the database for reading */
   if ((fh = open(db.database + ".dcb", "r")) <> EOF) {
   
      /* Seek to the database version offset */
      lseek(fh, 32, 'B');
      
      /* Read the majver/minver bytes */
      read(fh, szBuffer, 2);

      /* Close the file handle */
      close(fh);
   }
   
   return(num(szBuffer[0]));
}

