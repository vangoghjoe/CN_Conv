/*
 * V 4/27/13 
 * usage: PATH-TO-CN-EXE  /nosplash  path-to-this-CPT  full-path-to-DCB [full-path-to-log]
 * NOTE: full-path-to log is optional, defaults to basename(dcb) + "CONV-STATS.LOG"
 *
 * NOTES:
 *  - reminder, can't actually call a cpL from the cmdline, only the cpT
 * ------------
 *
 * SYNOPSIS:
 * ---------
 *      This CPL will bulk convert all pre-Concordance v10 databases to Concordance v10
 *      in the parent-level folder(s) that you specify in the log file (see txtFileWithPathsToConvert below).
 *
 *      This CPL will also bulk convert all pre-Concordance v5 imagebases to Concordance Image v5.
 *
 */



/****************************************************************
* Name:         Global bit setting variables                    *
*****************************************************************/

int64	VOLUMEBITSv1	=	16383;				/* 0x00003FFF */	/* v1 and v2 are 32 bit but use 64 for consistency */
int64	BOXBITv1		=   16384;				/* 0x00004000 */
int64	FOLDERBITv1		=   32768;				/* 0x00008000 */
int64	DOCBITv1		=   65536;				/* 0x00010000 */
int64	PAGEBITv1		=  131072;				/* 0x00020000 */
int64	PAGEBITSv1		= -131072; 				/* 0xFFFE0000 */

int64	VOLUMEBITSv2	=   131071;				/* 0x0001FFFF */
int64	BOXBITv2		=   131072;				/* 0x00020000 */
int64	FOLDERBITv2		=   262144;				/* 0x00040000 */
int64	DOCBITv2		=   524288;				/* 0x00080000 */
int64	PAGEBITv2		=  1048576;				/* 0x00100000 */
int64	PAGEBITSv2		= -1048576;				/* 0xFFF00000 */

int64	VOLUMEBITSv3	=   536870911;			/* 0x000000001FFFFFFF */
int64	BOXBITv3		=   536870912;			/* 0x0000000020000000 */
int64	FOLDERBITv3		=  1073741824;			/* 0x0000000040000000 */
int64	DOCBITv3		=  2147483648;			/* 0x0000000080000000 */
int64	PAGEBITv3		=  4294967296;			/* 0x0000000100000000 */
int64	PAGEBITSv3		=    16777215*PAGEBITv3;/* 0x00FFFFFF00000000 */
	 /* RESERVED */								/* 0xFF00000000000000 */

int64	VOLUMEBITSv5	=  1073741823;			/* 0x000000003FFFFFFF */
int64	BOXBITv5		=  1073741824;			/* 0x0000000040000000 */
int64	FOLDERBITv5		=  2147483648;			/* 0x0000000080000000 */
int64	PAGEBITv5		=  4294967296;			/* 0x0000000100000000 */
int64	PAGEBITSv5		=    16777215*PAGEBITv5;/* 0x00FFFFFF00000000 */
int64	DOCBITv5		=    16777216*PAGEBITv5;/* 0x0100000000000000 */
	 /* RESERVED */								/* 0xFE00000000000000 */

int64 VOLUMEBITS_SRC;
int64 BOXBIT_SRC;
int64 FOLDERBIT_SRC;
int64 DOCBIT_SRC;
int64 PAGEBITS_SRC;
int64 PAGEBIT_SRC;

int64 VOLUMEBITS_DST;
int64 BOXBIT_DST;
int64 FOLDERBIT_DST;
int64 DOCBIT_DST;
int64 PAGEBITS_DST;
int64 PAGEBIT_DST;

int MAX_DATABASES_ALLOWED_OPEN = 16;


/* LN modifications */
int fh_stats_log, fh_args_file;
char args_file_pfn[256], stats_log_pfn[256], dcb_pfn[256], dir_pfn[256], vol_pfn[256];
int  nDstVersion = 5;
int db, g_fh_log;
text g_spaceStr = "LN_SPACE_XYZ";
text g_dcb_pfn, g_results_pfn, g_log_pfn;

int CR=13, LF=10, TAB=9, EOF=-1;
int g_hasError;
int OK=0, ERROR=1, TRUE=1, FALSE=0;

/****************************************************************
* Name:         LN_replace(text str, oldval, newval)          *
* Synopsis:     Replace instances of oldval with new val in str *
* Returns:      str
****************************************************************/
LN_replace(text mystr, oldval, newval)
{
   int i, len_oldval, len_newval;

   len_oldval = len(oldval);
   len_newval = len(newval);

   i = 1;
   while (i=match(mystr, oldval, i)) {
      mystr = substr(mystr, 1, i-1) + newval + substr(mystr, i + len_oldval);
      i = i + len_newval;
   }

   return mystr;
}

stripDcbExt (text pfn) {
   text temp;
   int ll;

   ll = len(pfn);
   temp = upper(substr(pfn, ll-3));

   if (temp == ".DCB") {
      pfn = substr(pfn,1,ll-4);
   }
   
   return pfn;
}


int DEBUG=1;
main()
{
    int    i, fhLog;
    char   parentLevelPathsToConvert[256];
    text   start_time, stop_time;
    char   status, convert_status;
    char   dcb_pfn_root[256];

    if (DEBUG) messageBox("DEBUGGING","",0);


    g_hasError = FALSE;
    /* Problems with spaces in cmd line args, so sort of URL-encode it,
     * except substitute the string LN_SPACE_XYZ for any spaces
     */

    dcb_pfn_root = getarg(2); /* arg0 = /nospash   arg1 = this CPT */
    if (dcb_pfn_root == "") {
        messageBox("wrong nr args, look at top of CPL code", "Error", MB_OK);
        return;  
    }
    dcb_pfn_root = LN_replace(dcb_pfn_root, g_spaceStr, " ");
    dcb_pfn_root = stripDcbExt(dcb_pfn_root);


    dcb_pfn = dcb_pfn_root + ".DCB";
    dir_pfn = dcb_pfn_root + ".DIR";
    vol_pfn = dcb_pfn_root + ".VOL";
    
    /* stats log */
    stats_log_pfn = getarg(3); 
    if (stats_log_pfn <> "") {
       stats_log_pfn = LN_replace(stats_log_pfn, g_spaceStr, " ");
    }
    else {
       stats_log_pfn = dcb_pfn_root + "-CONV-CPL-STATS.LOG";
    }

    /* 
    messageBox("exists = " + str(exist(dcb_pfn)), "Convert Imagebase Error", MB_OK);
    return;
    */

    /*
    messageBox("dcb pfn = " + dir_pfn, "Convert Imagebase Error", MB_OK);
    messageBox("dcb pfn = " + stats_log_pfn, "Convert Imagebase Error", MB_OK);
    */

    init_stats_log();

    /* Convert DCB */
    start_time = get_time_stamp();
    write_stats_log("DCB|" + dcb_pfn + "|START|" + start_time);


    if (DEBUG) messageBox("DIR_pfn = " + dir_pfn,"",0);
    /* Convert DIR */
    if (exist(dir_pfn)) {
        start_time = get_time_stamp();
        write_stats_log("DIR|" + dir_pfn + "|START|" + start_time);
        status = ConvertSingleDIRImagebase(dir_pfn, nDstVersion);
        stop_time = get_time_stamp();
        write_stats_log("DIR|" + dir_pfn + "|DURATION|" + xlate_status(status) + "|"+ start_time + "|" + stop_time);

        if (status==STATUS_BAD) {
            g_hasError = TRUE;
            finish_stats_log();
            exit();
        }
    }
    else {
        write_stats_log("DIR|NONE FOUND||N/A");
    }

    /* Convert VOL */
    if (exist(vol_pfn)) {
        start_time = get_time_stamp();
        write_stats_log("VOL|" + vol_pfn + "|START|" + start_time);
        status = ConvertSingleVOLImagebase(vol_pfn, nDstVersion);
        stop_time = get_time_stamp();
        write_stats_log("VOL|" + vol_pfn + "|DURATION|" + xlate_status(status) + "|"+ start_time + "|" + stop_time);

        if (status==STATUS_BAD) {
            g_hasError = TRUE;
            finish_stats_log();
            exit();
        }
    }
    else {
        write_stats_log("VOL|NONE FOUND||N/A");
    }


    write_stats_log("END|"+get_time_stamp());
    /* Still here? Finished successfully */
    finish_stats_log();

    /* ends the CPL, closes all dbs and quit CN */
    if (DEBUG==0) exit();

}

/****************************************************************
* Name:         xlate_status(char status)
****************************************************************/
xlate_status(int status) 
{
    switch (status) {
        case STATUS_OK: 
            return "OK";
            break;
        case STATUS_NOT_NEEDED: 
            return "NOT_NEEDED";
            break;
        case STATUS_BAD:
            return "FAILED";
            break;
        default:
            return "UNKNOWN STATUS VALUE";
    }
}

/****************************************************************
* Name:         init_stats_log()
****************************************************************/
init_stats_log() 
{
    if ((fh_stats_log = open(stats_log_pfn, "w")) == EOF) {
        exit();  /* ends the CPL, closes all dbs and quite CN */
    }
    close(fh_stats_log);
    write_stats_log("START|" + get_time_stamp());
}

/****************************************************************
* Name:         finish_stats_log
* Depending on error status, write the STOP REC and EXIT STATUS rec
****************************************************************/
finish_stats_log()
{
    write_stats_log("|STOP|");
    if (g_hasError == TRUE) {
		write_stats_log("|EXIT_STATUS|" + "FAILED");
        messageBox("ERROR!!!","",0);
    }
    else {
		write_stats_log("|EXIT_STATUS|" + "OK");
    }
}

/****************************************************************
* Name:         write_log(msg, hasCRLF)
* Open and close each time to make sure its flushed.  This is
* a low traffic file so won't impact performance.
****************************************************************/
write_stats_log(text msg) 
{
	int msgLen;
	text mytime;

	mytime = get_time_stamp();
    msg = mytime + "|" + msg;
	msgLen = len(msg);
    if ((g_fh_log = open(stats_log_pfn, "a")) == EOF) {
        messageBox("ERROR: Can't open status log for writing " + stats_log_pfn,"",0);
        exit();  /* ends the CPL, closes all dbs and quite CN */
    }
    writeln(g_fh_log, msg, msgLen);
    close(g_fh_log);
}

/****************************************************************
* Name:         get_time_stamp()
****************************************************************/
get_time_stamp ()
{ 
    int hours, mins, secs;
    text buf;

    time(hours, mins, secs);
    buf = dtoc(today()) + "  " + str(hours) + ":" + str(mins) + ":" + str(secs);
    return buf;
}


/****************************************************************
* Name:         ConvertSingleImagebase()                        *
* Synopsis:     Converts a single set of imagebase files.       *
****************************************************************/
ConvertSingleImagebase( text pszFile; int nDstVersion )
{
    text pszFileBase;
    text pszFilePath;
    int i = 0;
    int j = 0;
    int nError = 0;

    /* Get the path and file name root (minus any extension) */
    while( i = match( pszFile, ".", j+1 ) )
        j = i;
    pszFileBase = substr( pszFile, 1, j );

    /* Call conversion routines for the .dir and .vol DBs */
    nError = ConvertSingleDIRImagebase( pszFilePath = pszFileBase + "dir", nDstVersion );
    if (nError == TRUE)
    {
        ConvertSingleVOLImagebase( pszFilePath = pszFileBase + "vol", nDstVersion );
    } else {
        messageBox("Error in converting DIR file.  VOL file skipped.", "Convert Imagebase Error", MB_OK);
    }
}

/****************************************************************
* Name:         ConvertSingleDIRImagebase()                     *
* Synopsis:     Converts a single *.DIR imagebase file          *
****************************************************************/
ConvertSingleDIRImagebase(text pszFile; int nDstVersion)
{
   int      btDir,
            btTempDir,
            nError,
            bBoxBreak,
            bFolderBreak,
            bDocBreak,
            nCount,
            nSrcVersion,
            bUpgrade;
   text     pszTempFile;
   
	text	pszKey; 
	text	pszUnicodeKey;

   char     szVersion[2];
               
   int64    nSrcData64,
			nDstData64,
			nVolume64,
			nPages64;

    char    status;       /* SUCCESS, FAILURE, NOT_NEEDED */
 
   /* Set the bit settings and check the version */
   SetDstBitSettings(nDstVersion);         
   nSrcVersion = SetSrcBitSettings(pszFile);
   nError = 0; 

   status = STATUS_BAD;
   bUpgrade = FALSE;
   if ((nSrcVersion == 3) and (nDstVersion == 4))	/* 3 to 4 does not change bits */
   {
        status = STATUS_OK;
        bUpgrade = TRUE;
		system("copy " + chr(34) + pszFile + chr(34) + " " + chr(34) + pszFile + ".old" + chr(34));        
   }
   else if (nSrcVersion < nDstVersion)
   {
        if (DEBUG) messageBox("ConvertImageBase src<Dest","",0);
      /* Open the .DIR file */
      if ((btDir = btopen(pszFile)) <> EOF) 
      {      
         /* Create the temp .DIR file */
         if ((btTempDir = btcreate((pszTempFile = pszFile + ".tmp"), FALSE)) <> EOF) 
         {         
            /* Cycle through the original DIR file */
            for (nError = btfirst(btDir, pszKey, nSrcData64); nError == 0; nError = btnext(btDir, pszKey, nSrcData64)) 
            {            
               puts(1,0,pad("Processing record " + str(nCount = nCount + 1), 'L',80),MenuColor_);

               /* Get the various values */
               nVolume64 = nSrcData64 & VOLUMEBITS_SRC;
               nPages64 = (nSrcData64 & PAGEBITS_SRC) / PAGEBIT_SRC;
               if (nSrcData64 & BOXBIT_SRC)
                  bBoxBreak = TRUE;
               else
                  bBoxBreak = FALSE;
               if (nSrcData64 & FOLDERBIT_SRC)
                  bFolderBreak = TRUE;
               else
                  bFolderBreak = FALSE;
               if (nSrcData64 & DOCBIT_SRC)
                  bDocBreak = TRUE;
               else
                  bDocBreak = FALSE;

               /* Convert the values to the new 64-bit value */
               nDstData64 = 0;
               nDstData64 = nVolume64 | (nPages64 * PAGEBIT_DST);
               if (bBoxBreak)
                  nDstData64 = nDstData64 | BOXBIT_DST;
               if (bFolderBreak)
                  nDstData64 = nDstData64 | FOLDERBIT_DST;
               if (bDocBreak)
                  nDstData64 = nDstData64 | DOCBIT_DST;

               /* This data needs to be converted to unicode */
               pszUnicodeKey = pszKey;
               btinsert(btTempDir,pszUnicodeKey,nDstData64);

            }
            status = STATUS_OK;
            
            /* Close the temp .DIR file */
            btclose(btTempDir);
         }
         
         /* Close the .DIR file */
         btclose(btDir);
      }           
      else {
          status = STATUS_BAD;
      }
      
      if ((pszTempFile <> "") and (status == STATUS_OK))  {

          /* Unlink the old .DIR file and rename */ 
          erase(pszFile + ".old"); 

          rename(pszFile, pszFile + ".old");
          nError = rename(pszTempFile, pszFile);

          if (nError == 0)
          {
              bUpgrade = TRUE;
              status = STATUS_OK;
          } else {
              status = STATUS_BAD;
          }
      }
      
   } else { /* else if (nSrcVersion < nDstVersion) */
       status = STATUS_NOT_NEEDED;
   }


   if (bUpgrade == TRUE)
   {
        szVersion[0] = nDstVersion;
        szVersion[1] = 0;
        SetImagebaseVersion(pszFile, szVersion);
   }

   return(status);
}

/****************************************************************
* Name:         ConvertSingleVOLImagebase()                     *
* Synopsis:     Converts a single *.VOL imagebase file          *
****************************************************************/
ConvertSingleVOLImagebase(text pszFile; int nDstVersion)
{
    int      btVol,
             btTempVol,
             nError,
             nCount,
             bUpgrade,
             nSrcVersion;
    text     pszTempFile;

    text	pszKey;
    text	pszUnicodeKey;

    char     szVersion[2];

    int64    nData64;
    char    status;       /* SUCCESS, FAILURE, NOT_NEEDED */

   /* Set the bit settings and check the version */
   status = STATUS_BAD;
   bUpgrade = FALSE;
   nCount = 0;
   nSrcVersion = SetSrcBitSettings(pszFile);
   
   /* Put up a status message */
     /* messageBox("VOL: src = " + str(nSrcVersion) + " dst = " + str(nDstVersion), "info", MB_OK); */
   puts(0,0, "Processing VOL file " + pszFile + " from v" + str(nSrcVersion) + " to v" + str(nDstVersion));
   puts(1,0,pad("", 'L',80),MenuColor_);

   if ((nSrcVersion == 3) and (nDstVersion == 4))	/* no conversion for < v5 */
   {
       status = STATUS_OK;
       system("copy " + chr(34) + pszFile + chr(34) + " " + chr(34) + pszFile + ".old" + chr(34));        
       bUpgrade = TRUE;
   }
   else if (nSrcVersion < nDstVersion)
   {
      /* Open the .VOL file */
      if ((btVol = btopen(pszFile)) <> EOF) 
      {      
         /* Create the temp .VOL file */
         if ((btTempVol = btcreate((pszTempFile = pszFile + ".tmp"), FALSE)) <> EOF) 
         { 
            bUpgrade = TRUE;
            /* Cycle through the original VOL file */
            for (nError = btfirst(btVol, pszKey, nData64); nError == 0; nError = btnext(btVol, pszKey, nData64)) 
            {            
                puts(1,0,pad("Processing record " + str(nCount = nCount + 1), 'L',80),MenuColor_);
                pszUnicodeKey = pszKey;
                btinsert(btTempVol,pszUnicodeKey,nData64);
            }
            status = STATUS_OK;
            
            /* Close the temp .VOL file */
            btclose(btTempVol);
         }
         
         /* Close the .VOL file */
         btclose(btVol);
        
      } 
      else {
          status = STATUS_BAD;
      }

      if ((pszTempFile <> "") and (status == STATUS_OK)) { 
         /* Unlink the old .DIR file and rename */ 
         erase(pszFile + ".old"); 
         rename(pszFile, pszFile + ".old");
         nError = rename(pszTempFile, pszFile);

          if (nError == 0)
          {
              bUpgrade = TRUE;
              status = STATUS_OK;
          } else {
              status = STATUS_BAD;
          }
      } 
   } else {
       status = STATUS_NOT_NEEDED;
   }

   if (bUpgrade == TRUE)
   {
      szVersion[0] = nDstVersion;
      szVersion[1] = 0;
      SetImagebaseVersion(pszFile, szVersion);
   }

   return(status);
}


RGB(char red, grn, blu)
{
   return(((blu & 255) * 65536) | ((grn & 255) * 256) | (red & 255));
}

/****************************************************************
* Name:         Message                                         *
* Synopsis:     Displays error message and waits for key.       *
****************************************************************/
Message(text message; int wait)
{
text screen;
int key;

   cursoroff();
   if (wait)
      screen = save(5,13,8,69);

   box(5,13,8,69, "3D", MenuColor_);
   puts(6,14,pad(message,'C',53),MenuColor_);

   if (wait)  {
      key = getkey();
      restore(5,13,screen);
   }

   return(asc(upper(chr(key))));
}  /* Message() */

/****************************************************************
* Name:         SetSrcBitSettings()                             *
* Synopsis:     Sets the bit settings depending on DIR version. *
****************************************************************/
SetSrcBitSettings(text pszFile)
{
   int      fhDir,
            nVersion = 1;
   char     szVersion[3];
   
   /* Open the file */
   if ((fhDir = open(pszFile, "r")) <> EOF) {
   
      /* Seek to the 24th byte */
      lseek(fhDir, 24, 'B');
      
      /* Read the next 2 bytes */
      read(fhDir, szVersion, 2);

      if (szVersion[0] > 1) {
         nVersion = szVersion[0];
      }
      else {
         if ((szVersion[0] == 1) and (szVersion[1] > 48))
            nVersion = 2;
      }
      
      /* This allows for sub-versions, ie, 4.1 to be detected as 4 */
      if (nVersion > 256) nVersion = nVersion & 255;
	

      /* Set the bit settings */
      switch(nVersion) {
      
         case 1:
            VOLUMEBITS_SRC = VOLUMEBITSv1;
            BOXBIT_SRC     = BOXBITv1;
            FOLDERBIT_SRC  = FOLDERBITv1;
            DOCBIT_SRC     = DOCBITv1;
            PAGEBITS_SRC   = PAGEBITSv1;
            PAGEBIT_SRC    = PAGEBITv1;
            break;
            
         case 2:
            VOLUMEBITS_SRC = VOLUMEBITSv2;
            BOXBIT_SRC     = BOXBITv2;
            FOLDERBIT_SRC  = FOLDERBITv2;
            DOCBIT_SRC     = DOCBITv2;
            PAGEBITS_SRC   = PAGEBITSv2;
            PAGEBIT_SRC    = PAGEBITv2;
            break;
            
         case 3:
            VOLUMEBITS_SRC = VOLUMEBITSv3;
            BOXBIT_SRC     = BOXBITv3;
            FOLDERBIT_SRC  = FOLDERBITv3;
            DOCBIT_SRC     = DOCBITv3;
            PAGEBITS_SRC   = PAGEBITSv3;
            PAGEBIT_SRC    = PAGEBITv3;
            break;
            
        case 4:
            VOLUMEBITS_SRC = VOLUMEBITSv3;
            BOXBIT_SRC     = BOXBITv3;
            FOLDERBIT_SRC  = FOLDERBITv3;
            DOCBIT_SRC     = DOCBITv3;
            PAGEBITS_SRC   = PAGEBITSv3;
            PAGEBIT_SRC    = PAGEBITv3;
            break;
      }
                             
      /* Close the file */
      close(fhDir);
   }
   
   return(nVersion);
}


/****************************************************************
* Name:         SetSrcBitSettings()                             *
* Synopsis:     Sets the bit settings depending on DIR version. *
****************************************************************/
SetDstBitSettings(int nVersion)
{
    switch(nVersion) {
    
        case 3:
        VOLUMEBITS_DST = VOLUMEBITSv3;
        BOXBIT_DST     = BOXBITv3;
        FOLDERBIT_DST  = FOLDERBITv3;
        DOCBIT_DST     = DOCBITv3;
        PAGEBITS_DST   = PAGEBITSv3;
        PAGEBIT_DST    = PAGEBITv3;
        break;
        
        case 4:
        VOLUMEBITS_DST = VOLUMEBITSv3;
        BOXBIT_DST     = BOXBITv3;
        FOLDERBIT_DST  = FOLDERBITv3;
        DOCBIT_DST     = DOCBITv3;
        PAGEBITS_DST   = PAGEBITSv3;
        PAGEBIT_DST    = PAGEBITv3;
        break;
        
		case 5:
        VOLUMEBITS_DST = VOLUMEBITSv5;
        BOXBIT_DST     = BOXBITv5;
        FOLDERBIT_DST  = FOLDERBITv5;
        DOCBIT_DST     = DOCBITv5;
        PAGEBITS_DST   = PAGEBITSv5;
        PAGEBIT_DST    = PAGEBITv5;
        break;
    }
}


/*****************************************************/
/* Function: SetImagebaseVersion()                   */
/* Purpose : Sets the imagebase version              */
/*****************************************************/
SetImagebaseVersion(text pszFile; char szVersion[])
{
   int   fhDir;

   /* Open the file */
   if ((fhDir = open(pszFile, "r+")) <> EOF) {
   
      /* Seek to the 24th byte */
      lseek(fhDir, 24, 'B');
      
      /* Read the next 2 bytes */
      write(fhDir, szVersion, 2);
      
      /* Close the file */
      close(fhDir);      
   }
}

/* Standard dialog button return values. */
int IDOK     = 1;
int IDCANCEL = 2;
int IDABORT  = 3;
int IDRETRY  = 4;
int IDIGNORE = 5;
int IDYES    = 6;
int IDNO     = 7;

/* messageBox() display options. */
int MB_OK               = 0;
int MB_OKCANCEL         = 1;
int MB_ABORTRETRYIGNORE = 2;
int MB_YESNOCANCEL      = 3;
int MB_YESNO            = 4;
int MB_RETRYCANCEL      = 5;
int MB_TYPEMASK         = 15;

int MB_ICONHAND         = 16;
int MB_ICONQUESTION     = 32;
int MB_ICONEXCLAMATION  = 48;
int MB_ICONASTERISK     = 64;
int MB_ICONMASK         = 240;

int MB_ICONINFORMATION  = MB_ICONASTERISK;
int MB_ICONSTOP         = MB_ICONHAND;

int MB_DEFBUTTON1       = 0;
int MB_DEFBUTTON2       = 256;
int MB_DEFBUTTON3       = 512;
int MB_DEFMASK          = 3840;

int MB_APPLMODAL        = 0;
int MB_SYSTEMMODAL      = 4096;
int MB_TASKMODAL        = 8192;

int MB_NOFOCUS          = 32768;

int OFN_NOVALIDATE	= 256;

char    ESC = 27,
        EOF = -1,
        CR = 13,
        LF = 10,
        CTRLENTER = LF,
        STATUS_BAD = 0,
        STATUS_NOT_NEEDED = 1,
        STATUS_OK = 2,
        TRUE = 1,
        FALSE = 0;
short   F1 = 15104,
        F2 = 15360,
        F3 = 15616,
        F4 = 15872,
        F5 = 16128,
        F6 = 16384,
        F7 = 16640,
        F8 = 16896,
        F9 = 17152,
        F10 = 17408,
        LEFT = 19200,
        RIGHT = 19712,
        UP = 18432,
        DOWN = 20480,
        PGUP = 18688,
        PGDN = 20736,
        HOME = 18176,
        END = 20224;

