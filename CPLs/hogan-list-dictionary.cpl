/*


*/	

/* GLOBALS */
int db, g_fh_log;
text g_spaceStr = "LN_SPACE_XYZ";
text g_dcb_pfn, g_results_pfn, g_log_pfn;
int CR=13, LF=10, TAB=9, EOF=-1;
int g_hasError;
int OK=0, ERROR=1, TRUE=1, FALSE=0;

main() 
{
	int status;
    int btfh, data;
    char key[256];
    
    /*btfh = btopen(db.database + ".DCT");*/
    /*btmenu(btfh,0,0,25,25,"dict",key,data);*/
    /*return;*/
	
    /* Inits */
    g_hasError = FALSE;
    if ((Inits())==ERROR) {
        finish_log();
        exit();
    }

    /*
    g_log_pfn = "C:\_query-dict.txt";
    init_log();
    */

    /* clear search history */
    query(db, -1);
    
    /* process tags */
    if (GetDatabaseVersion(db) < 9)
	   status = ProcessDictPreV10(db);
	else
	   status = ProcessDictPreV10(db);

	 if (status == ERROR) {
         finish_log();
         exit();
     }

     /* still here?  finish the log */
     finish_log();
     exit();
}

/* Get the paths of various input / output files, 
 * - initialize the log
 * - open the db
 */
Inits() 
{
	text dcb_pfn_root, vname, time;
	
    /* Problems with spaces in cmd line args, so sort of URL-encode it,
     * except substitute the string LN_SPACE_XYZ for any spaces
     */

	/* call is 
	 *    0          1        2      3              4
	 * /nosplash  this_CPT   DCB  RESULTS_FILE  LOG_FILE
     */
	  
	/* get cmdline args */
    g_dcb_pfn = getarg(2);
	g_results_pfn = getarg(3);
	g_log_pfn = getarg(4);
    g_dcb_pfn = LN_replace(getarg(2), g_spaceStr, " ");
    g_results_pfn = LN_replace(getarg(3), g_spaceStr, " ");
    g_log_pfn = LN_replace(getarg(4), g_spaceStr, " ");

    if (g_dcb_pfn == "") {
        messageBox("wrong nr args, look at top of CPL code", "Error", MB_OK);
        return ERROR;  
    }


	/* initialize log */
    init_log();
    time = get_time_stamp();
    write_log(time + "|START|" + g_dcb_pfn);
	
	/* open DB */
	if ((db = opendb(g_dcb_pfn)) == EOF) {
		write_log("|ERROR|" + "Unable to open dcb");
        g_hasError = TRUE;
		return ERROR;
	}
    return OK;
}

/* If has error, writes an error to the log,
 * sets g_hasError = TRUE
 * and returns FALSE
 * else returns TRUE
 */
SaveSearchHistory(int db)
{
	text qryStr;
	int qryNum;
	text buf;
	text outStr;
    int fh;
	/* open file for writing */

    if ((fh=open(g_results_pfn,"w"))==EOF) {
        g_hasError = TRUE;
        write_log("|ERROR| Can't open results file: " + g_results_pfn);
        return ERROR;
    }

	
	/* loop over queries */
	qryNum = 0;
	while ((query(db, qryNum, qryStr)) > -1) {
		if (qryNum == 0) 
			qryStr = "<Entire Database>";
		buf = LN_replace(pad(str(qryNum),'R',5)," ","0");
		buf = buf + chr(TAB) + str(hits(db)) + chr(TAB) + str(count(db)) + chr(TAB)+ qryStr + chr(CR) + chr(LF);
		outStr = outStr + buf;
		qryNum = qryNum + 1;
	}	

    if ((write(fh, outStr, len(outStr)))==EOF) {
        write_log("|ERROR| Cannot write to results file.");
        g_hasError = TRUE;
        return ERROR;
    }
	
	/* close file */
    close(fh);
    return OK;
}

ProcessDictPreV10(int db)
{
    int      btDict = EOF,
             btList = EOF,
             nData,
             status,
             fh,
             i;
    text     pszKey,
             buf,
             pszList;

    status = OK;

    if ((db <> EOF)) 
    {            
        /* Try and open the DCT file */
        if ((btDict = btopen(db.database + ".DCT")) <> EOF) {      

            /* Cycle through the DCT file */
            buf = "";
            for (i = btfirst(btDict, pszKey, nData); i == 0; i = btnext(btDict, pszKey, nData)) 
            {         
                buf = buf + pszKey + chr(CR) + chr(LF);
                /* Add a space to jump to the next DCT entry */
                pszKey = pszKey + " ";
            }
            /* Close the DCT file */
            btclose(btDict);

            /* write keys to the results file */
            if ((fh=open(g_results_pfn,"w"))==EOF) {
                g_hasError = TRUE;
                write_log("|ERROR| Can't open results file: " + g_results_pfn);
                return ERROR;
            }
            if ((write(fh, buf, len(buf)))==EOF) {
                write_log("|ERROR| Cannot write to results file.");
                g_hasError = TRUE;
                return ERROR;
            }
            
            /* close file */
            close(fh);
        }
        else {
            /* We were unable to open .DCT*/
            write_log("|ERROR| Can't open .DCT file");
            g_hasError = TRUE;
            status = ERROR;
        }
    }
    else {
        /* somehow lost db connection */
        write_log("|ERROR| in ProcessDict, db is EOF");
        g_hasError = TRUE;
        status = ERROR;
    }
    return status;
}

/* try making same as pre 10 except point at TRK instead of */
ProcessTags(int db)
{
		   int      btTag = EOF,
            btList = EOF,
            nData,
            status,
            i;
   text     pszKey,
			tag,
            pszList;
   
   status = OK;
   if ((db <> EOF)) 
   {            
       /* Try and open the tag file */
       if ((btTag = btopen(db.database + ".TRK")) <> EOF) 
       {      
           /* Cycle through the tag file */
           for (i = btfirst(btTag, pszKey, nData); i == 0; i = btgt(btTag, pszKey, pszKey, nData)) 
           {         
               /*pszKey  = LN_replace(pszKey,"»Tagging #","»Tagging "); */
               tag = substr(pszKey,2);
               tagquery(db, tag);
               /* Add a space to jump to the next tag */
               pszKey = pszKey + " ";
           }
           /* Close the tag file */
           btclose(btTag);
       }
       else {
           /* We were unable to open .TRK*/
           write_log("|ERROR| Can't open .TRK file");
           g_hasError = TRUE;
           status = ERROR;
       }
   }
   else {
       /* somehow lost db connection */
       write_log("|ERROR| in ProcessTags, db is EOF");
       g_hasError = TRUE;
       status = ERROR;
   }

    return status;
}




/****************************************************************
* Name:         oldProcessTagsV9                                   *
* Synopsis:     Main function to insert tags into a field.      *
****************************************************************/
oldProcessTags(int db, nField; text pszDelimiter)
{
   int      btTag = EOF,
            btList = EOF,
            nData,
            bError,
            i;
   text     pszKey,
            pszList;
   
   if ((db <> EOF) and (nField <> 0) and (pszDelimiter <> "")) 
   {            
     /* Cycle through the database */
     cycle(db) 
     {         
        /* Put up a status message */
        puts(0, 0,  "Processing record " + str(docno(db)) + " of " + str(count(db)) + ". ");

        /* Erase any previous contents of the field */
        db->nField = gettags(db, pszDelimiter);
        
     }
  }
      
}


/****************************************************************
* Name:         GetDatabaseVersion                              *
* Synopsis:     Returns int with major version of db.           *
****************************************************************/
GetDatabaseVersion(int db)
{
   int fh;
   char szBuffer[3];
   float fVer;
   
   /* Open the database for reading */
   if ((fh = open(db.database + ".dcb", "r")) <> EOF) {
   
      /* Seek to the database version offset */
      lseek(fh, 32, 'B');
      
      /* Read the majver/minver bytes */
      read(fh, szBuffer, 2);

      /* Close the file handle */
      close(fh);
   }
   
   return(num(szBuffer[0]));
}



/****************************************************************
* Name:         LN_replace(text str, oldval, newval)          *
* Synopsis:     Replace instances of oldval with new val in str *
* Returns:      str
****************************************************************/
LN_replace(text mystr, oldval, newval)
{
   int i, len_oldval, len_newval;

   len_oldval = len(oldval);
   len_newval = len(newval);

   i = 1;
   while (i=match(mystr, oldval, i)) {
      mystr = substr(mystr, 1, i-1) + newval + substr(mystr, i + len_oldval);
      i = i + len_newval;
   }

   return mystr;
}
/****************************************************************
* Name:         stripDcbExt (text pfn)                          *
* Synopsis:                                                     *
* Returns:      pfn
****************************************************************/
stripDcbExt (text pfn) {
   text temp;
   int ll;

   ll = len(pfn);
   temp = upper(substr(pfn, ll-3));

   if (temp == ".DCB") {
      pfn = substr(pfn,1,ll-4);
   }
   
   return pfn;
}

/****************************************************************
* Name:         init_log()
****************************************************************/
init_log() 
{
    if ((g_fh_log = open(g_log_pfn, "w")) == EOF) {
        messageBox("ERROR: Can't open status log for writing","",0);
        exit();  /* ends the CPL, closes all dbs and quite CN */
    }
    close(g_fh_log);
    /* write_log("START|" + get_time_stamp()); */
}

/****************************************************************
* Name:         finish_log
* Depending on error status, write the STOP REC and EXIT STATUS rec
****************************************************************/
finish_log()
{
    write_log("|STOP|");
    if (g_hasError == TRUE) {
		write_log("|EXIT_STATUS|" + "FAILED");
    }
    else {
		write_log("|EXIT_STATUS|" + "OK");
    }
}

/****************************************************************
* Name:         write_log(msg, hasCRLF)
* Open and close each time to make sure its flushed.  This is
* a low traffic file so won't impact performance.
****************************************************************/
write_log(text msg) 
{
	int msgLen;
	text mytime;

	mytime = get_time_stamp();
    msg = mytime + "|" + msg;
	msgLen = len(msg);
    if ((g_fh_log = open(g_log_pfn, "a")) == EOF) {
        messageBox("ERROR: Can't open status log for writing","",0);
        exit();  /* ends the CPL, closes all dbs and quite CN */
    }
    writeln(g_fh_log, msg, msgLen);
    close(g_fh_log);
}

/****************************************************************
* Name:         get_time_stamp()
****************************************************************/
get_time_stamp ()
{ 
    int hours, mins, secs;
    text buf;

    time(hours, mins, secs);
    buf = dtoc(today()) + "  " + str(hours) + ":" + str(mins) + ":" + str(secs);
    return buf;
}
