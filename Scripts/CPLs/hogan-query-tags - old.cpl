/*
	tagquery(db, "privileged");
	tagquery(db, "non-responsive");
	tagquery(db, "worthy");
	
	docno(db) => relative postion of doc in current query
	first, last, next
	count(db) = number of docs in current query
	hits(db) = number of hits in active query
	query(db, qrynum, [ char string[] ] ) -> sets active query to qrynum, returns -1 if out of range
	To clear all queries use query(db, -1). This will reset the query counter to 0, and erase the temporary query file.


*/	

/* GLOBALS */
int db, g_fh_stats_log;
text g_spaceStr = "LN_SPACE_XYZ";
text g_dcb_pfn, g_stats_log_pfn;
int CR=13, LF=10, TAB=9;

main() 
{
	int bError;
	
	/* clear search history */
	if (db.database == "") 
		messageBox("nothing open","",0);
	else
		messageBox(db.database,"",0);
	Inits() ; /* sets db */
	query(db, -1); /* clear search history */
	g_stats_log_pfn = db.database + "-v8-tags.txt";
	init_stats_log();
	
	
	if (GetDatabaseVersion(db) < 9)
	   bError = ProcessTagsPreV10(db);
	else
	   bError = ProcessTags(db);
	 if (bError == FALSE) {
		SaveSearchHistory(db);
	 }
}

Inits() 
{
	text dcb_pfn_root, vname, start_time;
	
    /* Problems with spaces in cmd line args, so sort of URL-encode it,
     * except substitute the string LN_SPACE_XYZ for any spaces
     */

	 /* call is 
	  *    0          1        2      3              4
	  * /nosplash  this_CPT   DCB  RESULTS_FILE  LOG_FILE
      */
    dcb_pfn = getarg(2);
	results_pfn = getargs(3);
	log_pfn = getargs(4);
    if (dcb_pfn_root == "") {
        messageBox("wrong nr args, look at top of CPL code", "Error", MB_OK);
        return;  
    }
    dcb_pfn_root = LN_replace(dcb_pfn_root, g_spaceStr, " ");
    dcb_pfn_root = stripDcbExt(dcb_pfn_root);


    g_dcb_pfn = dcb_pfn_root + ".DCB";

    
    /* stats log */
    g_stats_log_pfn = getarg(3); 
    if (g_stats_log_pfn <> "") {
       g_stats_log_pfn = LN_replace(g_stats_log_pfn, g_spaceStr, " ");
    }
    else {
		if (GetDatabaseVersion(db) < 9) 
			vname = "v8";
		else
			vname = "v10";
       g_stats_log_pfn = dcb_pfn_root + "-" + vname + "-tags.txt";
    }

    init_stats_log();

    start_time = get_time_stamp();
    write_stats_log("DCB|" + g_dcb_pfn + "|START|" + start_time);
}

SaveSearchHistory(int db)
{
	text qryStr;
	int qryNum;
	text buf;
	text outStr;
	/* open file for writing */
	
	/* loop over queries */
	qryNum = 0;
	while ((query(db, qryNum, qryStr)) > -1) {
		if (qryNum == 0) 
			qryStr = "<Entire Database>";
		buf = LN_replace(pad(str(qryNum),'R',5)," ","0");
		buf = buf + chr(TAB) + str(hits(db)) + chr(TAB) + str(count(db)) + chr(TAB)+ qryStr + chr(CR) + chr(LF);
		outStr = outStr + buf;
		qryNum = qryNum + 1;
	}	
	write_stats_log(outStr, "hasCRLF");
	
	/* close file */
}

ProcessTagsPreV10(int db)
{
		   int      btTag = EOF,
            btList = EOF,
            nData,
            bError,
            i;
   text     pszKey,
            pszList;
   
   bError = FALSE;
   
   /* Interesting note:  When the default tag has no hits, it doesn't show up in this list
    *   Apparently, even though it shows up in the Tag UI when it's not on any docs, it's
	*   not in the .TAG bt file. 
	*/
   if ((db <> EOF)) 
   {            
      /* Try and open the tag file */
      if ((btTag = btopen(db.database + ".TAG")) <> EOF) 
      {      
        
            /* Cycle through the tag file */
            for (i = btfirst(btTag, pszKey, nData); i == 0; i = btgt(btTag, pszKey, pszKey, nData)) 
            {         

               i = btinsert(btList, pszKey, 0);
				tagquery(db, pszKey);
               /* Add a space to jump to the next tag */
               pszKey = pszKey + " ";
            }
		 /* Close the tag file */
         btclose(btTag);
		}
		else {
            /* We were unable to open .TAG*/
            messageBox("Unable to open " + db.database + ".TAG", MB_OK | MB_ICONEXCLAMATION);
            bError = TRUE;
         }
	}
	return bError;
}

/* try making same as pre 10 except point at TRK instead of */
ProcessTags(int db)
{
		   int      btTag = EOF,
            btList = EOF,
            nData,
            bError,
            i;
   text     pszKey,
			tag,
            pszList;
   
   bError = FALSE;
   if ((db <> EOF)) 
   {            
      /* Try and open the tag file */
      if ((btTag = btopen(db.database + ".TRK")) <> EOF) 
      {      
        
            /* Cycle through the tag file */
            for (i = btfirst(btTag, pszKey, nData); i == 0; i = btgt(btTag, pszKey, pszKey, nData)) 
            {         
				/*pszKey  = LN_replace(pszKey,"»Tagging #","»Tagging "); */
				tag = substr(pszKey,2);
				tagquery(db, tag);
               /* Add a space to jump to the next tag */
               pszKey = pszKey + " ";
            }
		 /* Close the tag file */
         btclose(btTag);
		}
		else {
            /* We were unable to open .TRK*/
            messageBox("Unable to open " + db.database + ".TRK", MB_OK | MB_ICONEXCLAMATION);
            bError = TRUE;
         }
	}
	return bError;
}




/****************************************************************
* Name:         oldProcessTagsV9                                   *
* Synopsis:     Main function to insert tags into a field.      *
****************************************************************/
oldProcessTags(int db, nField; text pszDelimiter)
{
   int      btTag = EOF,
            btList = EOF,
            nData,
            bError,
            i;
   text     pszKey,
            pszList;
   
   if ((db <> EOF) and (nField <> 0) and (pszDelimiter <> "")) 
   {            
     /* Cycle through the database */
     cycle(db) 
     {         
        /* Put up a status message */
        puts(0, 0,  "Processing record " + str(docno(db)) + " of " + str(count(db)) + ". ");

        /* Erase any previous contents of the field */
        db->nField = gettags(db, pszDelimiter);
        
     }
  }
      
}


/****************************************************************
* Name:         GetDatabaseVersion                              *
* Synopsis:     Returns int with major version of db.           *
****************************************************************/
GetDatabaseVersion(int db)
{
   int fh;
   char szBuffer[3];
   float fVer;
   
   /* Open the database for reading */
   if ((fh = open(db.database + ".dcb", "r")) <> EOF) {
   
      /* Seek to the database version offset */
      lseek(fh, 32, 'B');
      
      /* Read the majver/minver bytes */
      read(fh, szBuffer, 2);

      /* Close the file handle */
      close(fh);
   }
   
   return(num(szBuffer[0]));
}



/****************************************************************
* Name:         LN_replace(text str, oldval, newval)          *
* Synopsis:     Replace instances of oldval with new val in str *
* Returns:      str
****************************************************************/
LN_replace(text mystr, oldval, newval)
{
   int i, len_oldval, len_newval;

   len_oldval = len(oldval);
   len_newval = len(newval);

   i = 1;
   while (i=match(mystr, oldval, i)) {
      mystr = substr(mystr, 1, i-1) + newval + substr(mystr, i + len_oldval);
      i = i + len_newval;
   }

   return mystr;
}
/****************************************************************
* Name:         stripDcbExt (text pfn)                          *
* Synopsis:                                                     *
* Returns:      pfn
****************************************************************/
stripDcbExt (text pfn) {
   text temp;
   int ll;

   ll = len(pfn);
   temp = upper(substr(pfn, ll-3));

   if (temp == ".DCB") {
      pfn = substr(pfn,1,ll-4);
   }
   
   return pfn;
}

/****************************************************************
* Name:         init_stats_log()
****************************************************************/
init_stats_log() 
{
    if ((g_fh_stats_log = open(g_stats_log_pfn, "w")) == EOF) {
        exit();  /* ends the CPL, closes all dbs and quite CN */
    }
    close(g_fh_stats_log);
    /* write_stats_log("START|" + get_time_stamp()); */
}

/****************************************************************
* Name:         write_stats_log(msg, hasCRLF)
* Open and close each time to make sure its flushed.  This is
* a low traffic file so won't impact performance.
* Will add a CRLF unless hasCRLF = "hasCRLF"
****************************************************************/
write_stats_log(text msg, hasCRLF) 
{
	int msgLen;
	msgLen = len(msg);
    if ((g_fh_stats_log = open(g_stats_log_pfn, "a")) == EOF) {
        exit();  /* ends the CPL, closes all dbs and quite CN */
    }
	if (hasCRLF == "hasCRLF") 
		msgLen = msgLen-2;
    writeln(g_fh_stats_log, msg, msgLen);
    close(g_fh_stats_log);
}

/****************************************************************
* Name:         get_time_stamp()
****************************************************************/
get_time_stamp ()
{ 
    int hours, mins, secs;
    text buf;

    time(hours, mins, secs);
    buf = dtoc(today()) + "  " + str(hours) + ":" + str(mins) + ":" + str(secs);
    return buf;
}