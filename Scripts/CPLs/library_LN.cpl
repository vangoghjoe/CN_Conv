/*
 * _library.cpl
 *
 * v1.0  25 May 2012
 *
 */


/****************************************************************
* Name:         RGB                                             *
* Synopsis:     Helper routine for Windows color creation.      *
****************************************************************/
RGB(int red, grn, blu)
{
   return(((blu & 255) * 65536) | ((grn & 255) * 256) | (red & 255));
}

/****************************************************************
* Name:         Message (text, wait)                            *
* Synopsis:     Displays error message; if wait, waits for key. *
****************************************************************/
Message( text message; int wait )
{
text screen;
int  key;

   cursoroff();
   screen = save( 5, 13, 10, 69 );
   box( 7, 13, 9, 69, "3U", RGB(0,0,150), RGB(0,0,255) );
   puts( 8, 14, pad( message, 'C', 55 ), RGB(255,255,255), RGB(0,0,255));
   if( wait ) {
      key = getkey();
   }
   restore( 5, 13, screen );
   if( islower( key ))
      key = key - ( 'a' - 'A' );
   return( key );
} /* Message() */

/****************************************************************
* Name:         FileName                                        *
* Synopsis:     Trims the path from the file name.              *
****************************************************************/
FileName(text name)
{
int i;
   while(i = match(name,chr(92),1))
      name = substr(name,i+1);
   return(name);
} /* FileName() */

/****************************************************************
* Name:         Path                                            *
* Synopsis:     Returns the path up to the last \ and without   *
*               the file's name.                                *
****************************************************************/
Path(text dosPath)
{
int i, j;

   if ((i = match(dosPath,":",1)) == 0)
      i = match(dosPath,chr(92),1);
   while(j = match(dosPath,chr(92),i+1))
      i = j;
   return(substr(dosPath,1,i));

} /* Path() */

/****************************************************************
* Name:         GetDatabaseVersion                              *
* Synopsis:     Returns int with major version of db.           *
****************************************************************/
GetDatabaseVersion(int db)
{
   int fh;
   char szBuffer[3];
   float fVer;
   
   /* Open the database for reading */
   if ((fh = open(db.database + ".dcb", "r")) <> EOF) {
   
      /* Seek to the database version offset */
      lseek(fh, 32, 'B');
      
      /* Read the majver/minver bytes */
      read(fh, szBuffer, 2);

      /* Close the file handle */
      close(fh);
   }
   
   return(num(szBuffer[0]));
}

/****************************************************************
* Name:         nextField                                       *
* Synopsis:     Finds next available paragraph field            *
****************************************************************/
nextField(int db, field) {

int nextfield;

   nextfield = field + 1;

   while ((isfield(db, db.name[nextfield])) and (db.type[nextfield] <> 'P') and (nextfield < db.fields))
       nextfield = nextfield + 1;

   if ((nextfield <= db.fields) and (isfield(db, db.name[nextfield])))
       return(nextfield);
   else
       return(FALSE);

}


/****************************************************************
* Name:         GetField                                        *
* Synopsis:     Prompt user for field name.                     *
****************************************************************/
GetField(int db, next, toprow, topcol)
{
int i, n;
text field[256];
text screen;

   if (db.documents >= 0) {
      field[0] = "Field      Type      ";
      for(i = 1; i <= db.fields; i = i +1)
         switch(db.type[i]) {
            case  'T' : field[i] =  pad(db.name[i],'L',13)+ "Text     ";
            case  'P' : field[i] =  pad(db.name[i],'L',13)+ "Paragraph";
            case  'N' : field[i] =  pad(db.name[i],'L',13)+ "Numeric  ";
            case  'D' : field[i] =  pad(db.name[i],'L',13)+ "Date     ";
         }
      i = db.fields + 1;

      screen = save(toprow, topcol, toprow+11, topcol+27);
      while(i > db.fields)
         i = menu(toprow, topcol, toprow+11, topcol+27, field, next, "");
      restore(toprow, topcol, screen);

      if (i)
         next = i;
   }
   debug(1);
   return(next);
} /* GetField() */

/****************************************************************
* Name:         LN_replace(text str, oldval, newval)          *
* Synopsis:     Replace instances of oldval with new val in str *
* Returns:      str
****************************************************************/
LN_replace(text mystr, oldval, newval)
{
   int i, len_oldval, len_newval;

   len_oldval = len(oldval);
   len_newval = len(newval);

   messageBox("str = " + mystr + "; old = " + oldval + "; new = " + newval, "", "");

   i = 1;
   while (i=match(mystr, oldval, i)) {
      mystr = substr(mystr, 1, i-1) + newval + substr(mystr, i + len_oldval);
      i = i + len_newval;
   }

   return mystr;
}

/****************************************************************
* Name:         MLength                                         *
* Synopsis:     See Mumps -- $L()                               *
* Arguments:    locField = text ; dlim = text                   *
* Returns:  0 if error, 1 if search string not found, else 	    *
*		number of occurences of dlim in the variable 	    *
*		locField. If dlim == "" returns the length of string*
****************************************************************/
MLength(text locField, dlim) 
{
int ii,
   npl,
   jj,
   stl,
   mres,
   done;
   
text location;

done = FALSE;
jj = 1;
ii = 0;
location = locField;
stl = len(location);

if (locField == "") 
   {
   return(-1);
   }

if (dlim == "") 
   {
   return (stl);
   } 

mres = match(location, dlim, 1);
if (mres == 0) 
   {
   return(1);
   }
else 
   {
      while (done <> TRUE)
      {
         npl = match(location, dlim, jj);
         if (npl >= 1) 
         {
            jj = npl + 1;
            ii = ii+1;
         } 
         else 
         {
            done = TRUE;
         }
      }
      return(ii+1);
   }
} /* End of MLength */

/****************************************************************
* Name:         MPiece()                                        *
* Synopsis:     See Mumps -- $P()                               *
* Arguments:    OString = text; dlim = text; Frm = int; To = int*
* Returns:	0 if error, else the extracted piece of OString     *
****************************************************************/
MPiece(text OString, dlim; int Frm, To) {

int ii,
   cnt,
   OSet,
   RBeg,
   REnd;
text Buff,
   Cut;

if (dlim == "")
   return(0);
   
if (Frm == 0)
   return(0);

if (To == 0)
	To = Frm;

Buff = OString;
Cut = dlim;
RBeg = 1;
REnd = 1;
OSet = 1;
cnt = MLength(OString, dlim);

if ((cnt == 1) and (Frm == 2)) 
   {
   RBeg = (match(OString, dlim, 1)) + len(dlim);
   return(substr(OString, RBeg, len(OString)));
   }
if ((cnt == 1) and (Frm == 1))
   {
   REnd = match(OString, dlim, 1) - 1;
   return(substr(OString, 1, REnd));
   }
else 
   {
   if (Frm > cnt)
      return(0);
   if (To > cnt)
      To = cnt;
   ii = 1;
   while (ii <= To)
      {
         if (ii == Frm)
            {
            if (ii > 1)
               {
               RBeg=OSet+len(dlim);
               }
            else
               {
               RBeg= 1;
               }
            }
         OSet = match(OString, dlim, (OSet+1));
         if (ii == To)
            {
            REnd=OSet-1;
            }
        ii = ii + 1;
	}
   }
if (To == cnt)
   {
   REnd = len(OString);
   }
return (substr(OString, RBeg, (REnd-RBeg+1)));
} /*MPiece*/

