/*
 *  Concordance Programming Language Tag2Field Program
 *
 *      Copyright (c) 1994 - 2007 Applied Discovery, Inc.
 *      ALL RIGHTS RESERVED.
 *      13427 NE 16th Street, Suite 200
 *      Bellevue, WA 98005
 *
 *      Unauthorized distribution, adaptation or use may be
 *      subject to civil and criminal penalties.
 *
 *      You may incorporate this program into your own programs
 *      ONLY if you incorporate the following copyright notice:
 *
 *      Copyright (c) 200__ YOUR NAME. ALL RIGHTS RESERVED.
 *      Portions copyright (c) 1994 - 2007 Applied Discovery, Inc.
 */

 /*
  *  NOTES
  *  v 1.1  2012-05-14  #MTS JLH#
  *     -- Use gettags API fcn 
  *     -- tested for v8, v9 and v10
  *
  */

text gszTag2Field = "Tag2Field -- v1.1 05 May 2012";

/*****************************************************/
/* Function: Main                                    */
/* Purpose : Entry point for all programs            */
/*****************************************************/
main() 
{
   text        pszMenu[6],
               pszMenu1,
               pszMenu2,
               pszMenu3,
               pszDatabase,
               pszDelimiter;
   int         db,
               nField,
               nNext,
               bDone;
               
   /* Set up the menus */
   pszMenu1 = "[1] Open database : ";
   pszMenu2 = "[2] Tag field     : ";
   pszMenu3 = "[3] Delimiter     : ";
   pszMenu[0] = gszTag2Field;
   pszMenu[1] = pszMenu1;
   pszMenu[2] = pszMenu2;
   pszMenu[3] = pszMenu3;
   pszMenu[4] = "[G] Go!";
   pszMenu[5] = "[Q] Quit";


   if (db.documents > 0) {
      pszMenu[1] = pszMenu1 + FileName(db.database);
      nNext = 2;
   }
   
   /* Display the menu */
   while (bDone == FALSE) {

      nNext = menu(5, 10, 13, 70, pszMenu, nNext,"123GQ"); 
      
      switch(nNext) {

         /* Quit */
         case 0:
            bDone = TRUE;
            break;
            
         /* Open database */
         case 1:
            
            /* Get the file name of the new database */
            if (getfile("Open database", "*.DCB", pszDatabase) == CR) {

               /* Close the previous database */
               closedb(db);
               db = EOF;
                        
               /* Open the database */
               if ((db = opendb(pszDatabase)) <> EOF) {
               
                  /* Set the menu item */
                  pszMenu[1] = pszMenu1 + FileName(db.database);
                  pszMenu[2] = pszMenu2;
                  nNext = 2;    
                  nField = 0;                                                                  
               }
            }
            break;
            
         /* Get the field */            
         case 2:
            if ((nField = GetField(db, nField)) <> 0) {
               if (db.type[nField] == 'P') {
                  pszMenu[2] = pszMenu2 + db.name[nField];
                  nNext = 3;
               } else {
                  messageBox("Please select a Paragraph field.", gszTag2Field, MB_OK | MB_ICONEXCLAMATION);
                  pszMenu[2] = pszMenu2;
                  nField = 0;
                  nNext = 2;
               }
            } else {
               pszMenu[2] = pszMenu2;
               nNext = 2;
            }
            break;
            
         /* Get the delimiter */
         case 3:
            if ((pszDelimiter = GetDelimiter()) <> "") {
               if (pszDelimiter == "; ")
                  pszMenu[3] = pszMenu3 + "<Semicolon>";
               else {
                  if (pszDelimiter == " ")
                     pszMenu[3] = pszMenu3 + "<Space>";
                  else {
                     if (pszDelimiter == ", ")
                        pszMenu[3] = pszMenu3 + "<Comma>";
                     else
                        pszMenu[3] = pszMenu3 + "<Newline>";
                  }
               }   
               nNext = 4;
            }
            break;

         /* Process the tag file */            
         case 4:
            if ((db == EOF) or (db.documents <= 0)) {
               messageBox("There are no documents in the current query or there is no open database." + newline() + "Please open a database to continue", gszTag2Field, MB_OK | MB_ICONEXCLAMATION);
               nNext = 1;               
            } else {
               if (nField == 0) {
                  messageBox("Please specify a field to place the tags.", gszTag2Field, MB_OK | MB_ICONEXCLAMATION);
                  nNext = 2;
               } else {
                  if (pszDelimiter == "") {
                     messageBox("Please specify a delimiter.", gszTag2Field, MB_OK | MB_ICONEXCLAMATION);
                     nNext = 3;
                  } else {
                     if (messageBox("All contents of the " + db.name[nField] + " field will be replaced.  Do you wish to continue?", gszTag2Field, MB_YESNOCANCEL) == IDYES) 
		     {
                        if (GetDatabaseVersion(db) < 9)
                           ProcessTagsPreV9(db, nField, pszDelimiter);
                        else
                           ProcessTags(db, nField, pszDelimiter);
                        nNext = 5;
                     }
                  }
               }
            }
            break;
            
         /* Quit */            
         case 5:
            bDone = TRUE;
            break;
      }
   }
}
                     
         
/****************************************************************
* Name:         ProcessTags                                     *
* Synopsis:     Main function to insert tags into a field.      *
****************************************************************/
ProcessTagsPreV9(int db, nField; text pszDelimiter)
{
   int      btTag = EOF,
            btList = EOF,
            nData,
            bError,
            i;
   text     pszKey,
            pszList;
   
   if ((db <> EOF) and (nField <> 0) and (pszDelimiter <> "")) 
   {            
      /* Try and open the tag file */
      if ((btTag = btopen(db.database + ".TAG")) <> EOF) 
      {      
         /* Create a temp list of the tags */
         pszList = db.database + " tag list.tmp";
         if ((btList = btcreate(pszList, FALSE)) <> EOF) 
         {         
            /* Cycle through the tag file */
            for (i = btfirst(btTag, pszKey, nData); i == 0; i = btgt(btTag, pszKey, pszKey, nData)) 
            {         
               /* Add the key to the list */
               i = btinsert(btList, pszKey, 0);
            
               /* Add a space to jump to the next tag */
               pszKey = pszKey + " ";
            }
            
         } 
         else {
         
            /* We were unable to create a temp list file */
            messageBox("Unable to create a temporary file in the database directory." + newline() + "Please check your permissions.", gszTag2Field, MB_OK | MB_ICONEXCLAMATION);
            bError = TRUE;
         }
         
         /* Close the tag file */
         btclose(btTag);
         
      } else {
      
         /* There was an error opening the tag file */
         messageBox("There was an error opening the tag file or there was is no tag file present for this database.", gszTag2Field, MB_OK | MB_ICONEXCLAMATION);
         bError = TRUE;
      }
      
      /* Process the list */
      if (bError == FALSE) {
      
         /* Cycle through the database */
         cycle(db) {
         
            /* Put up a status message */
            puts(0, 0,  "Processing record " + str(docno(db)) + " of " + str(count(db)) + ". ");

            /* Erase any previous contents of the field */
            db->nField = "";
            
            /* Cycle through the list */
            for (i = btfirst(btList, pszKey, nData); i == 0; i = btgt(btList, pszKey, pszKey, nData)) {
            
               /* If it is tagged then add it to the field */
               if (istagged(db, pszKey)) 
               {
				  if (pszKey == "")
					pszKey = "Default tag";
					
                  if (db->nField == "")
                     db->nField = pszKey;
                  else
                     db->nField = db->nField + pszDelimiter + pszKey;
               } 
            }
         }
      }
      
      /* Close the list file */
      if (btList <> EOF) {
         btclose(btList);
         erase(pszList);
      }
   }
}


/****************************************************************
* Name:         ProcessTagsV9                                   *
* Synopsis:     Main function to insert tags into a field.      *
****************************************************************/
ProcessTags(int db, nField; text pszDelimiter)
{
   int      btTag = EOF,
            btList = EOF,
            nData,
            bError,
            i;
   text     pszKey,
            pszList;
   
   if ((db <> EOF) and (nField <> 0) and (pszDelimiter <> "")) 
   {            
     /* Cycle through the database */
     cycle(db) 
     {         
        /* Put up a status message */
        puts(0, 0,  "Processing record " + str(docno(db)) + " of " + str(count(db)) + ". ");

        /* Erase any previous contents of the field */
        db->nField = gettags(db, pszDelimiter);
        
     }
  }
      
}


/****************************************************************
* Name:         GetDatabaseVersion                              *
* Synopsis:     Returns int with major version of db.           *
****************************************************************/
GetDatabaseVersion(int db)
{
   int fh;
   char szBuffer[3];
   float fVer;
   
   /* Open the database for reading */
   if ((fh = open(db.database + ".dcb", "r")) <> EOF) {
   
      /* Seek to the database version offset */
      lseek(fh, 32, 'B');
      
      /* Read the majver/minver bytes */
      read(fh, szBuffer, 2);

      /* Close the file handle */
      close(fh);
   }
   
   return(num(szBuffer[0]));
}

                              
/****************************************************************
* Name:         FileName                                        *
* Synopsis:     Trims the path from the file name.              *
****************************************************************/
FileName(text name)
{
int i;
   while(i = match(name,"\",1))
      name = substr(name,i+1);
   return(name);
} /* FileName() */


/****************************************************************
* Name:         GetDelimiter                                    *
* Synopsis:     Gets the delimiter from a file..                     *
****************************************************************/
GetDelimiter()
{
   text  pszDelimiterMenu[5],
         screen;
   int   i;
   char  szDelimiter[3];
   
   pszDelimiterMenu[0] = "Delimiter";
   pszDelimiterMenu[1] = "<Comma>";
   pszDelimiterMenu[2] = "<Semicolon>";
   pszDelimiterMenu[3] = "<Space>";
   pszDelimiterMenu[4] = "<New line>";
   
   screen = save(11, 30, 18, 50);
   while (i == 0)
      i = menu(11, 30, 18, 50, pszDelimiterMenu, i, "");
   restore(11, 30, screen);
   
   /* Set the delimiter */
   switch(i) {
      case 1:
         szDelimiter[0] = ',';
         szDelimiter[1] = ' ';
         szDelimiter[2] = 0;
         break;
      case 2:
         szDelimiter[0] = ';';
         szDelimiter[1] = ' ';
         szDelimiter[2] = 0;
         break;
      case 3:
         szDelimiter[0] = ' ';
         szDelimiter[1] = 0;
         break;
      case 4:
         szDelimiter[0] = 13;
         szDelimiter[1] = 10;
         szDelimiter[2] = 0;
         break;
   }
   
   return(szDelimiter);
}


/****************************************************************
* Name:         GetField                                        *
* Synopsis:     Prompt user for field name.                     *
****************************************************************/
GetField(int db, next) {

int i, n;
text field[101];
text screen;

   if (db.documents >= 0) {
      field[0] = "Field      Type      ";
      for(i = 1; i <= db.fields; i = i +1)
         switch(db.type[i]) {
            case  'T' : field[i] =  pad(db.name[i],'L',13)+ "Text     ";
            case  'P' : field[i] =  pad(db.name[i],'L',13)+ "Paragraph";
            case  'N' : field[i] =  pad(db.name[i],'L',13)+ "Numeric  ";
            case  'D' : field[i] =  pad(db.name[i],'L',13)+ "Date     ";
         }
      i = db.fields + 1;

      screen = save(11,30,21,57);
      while(i > db.fields)
         i = menu(11, 30, 21, 57, field, next,"");
      restore(11,30,screen);

      if (i)
         next = i;
   }
   return(next);
} /* GetField() */

            
      
                              
